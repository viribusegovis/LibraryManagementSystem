@* Views/Home/_BorrowedTab.cshtml - FIXED *@
@model LibraryManagementSystem.ViewModels.MemberDashboardViewModel

<div class="row">
    @{
        // FIXED: Use proper type conversion and method calls
        var borrowedBooks = Model.Member?.Borrowings?
        .Where(b => b.Status == "Emprestado")
        .ToList() ?? new List<Borrowing>();
    }

    @if (borrowedBooks.Any())
    {
        @foreach (var borrowing in borrowedBooks)
        {
            <div class="col-lg-4 col-md-6 mb-4" id="book-@borrowing.Book.BookId">
                <div class="card book-card h-100">
                    <div class="card-body">
                        <!-- Book Info -->
                        <div class="text-center mb-3">
                            <i class="fas fa-book fa-3x text-primary mb-2"></i>
                            <h6 class="card-title font-weight-bold">@borrowing.Book.Title</h6>
                            <p class="text-muted mb-1">@borrowing.Book.Author</p>
                            <small class="text-muted">
                                <i class="fas fa-tag me-1"></i>
                                @if (borrowing.Book.Categories != null && borrowing.Book.Categories.Any())
                                {
                                    @string.Join(", ", borrowing.Book.Categories.Select(c => c.Name))
                                }
                                else
                                {
                                    <text>Sem categoria</text>
                                }
                                |
                                <i class="fas fa-calendar me-1"></i>@borrowing.Book.YearPublished
                            </small>
                        </div>

                        <!-- Status Information -->
                        <div class="text-center mb-3">
                            <span class="status-badge @(borrowing.DueDate < DateTime.Now ? "status-overdue" : "status-borrowed")">
                                @if (borrowing.DueDate < DateTime.Now)
                                {
                                    <i class="fas fa-exclamation-triangle me-1"></i>
                                    <text>@((DateTime.Now - borrowing.DueDate).Days) dias em atraso</text>
                                }
                                else
                                {
                                    <i class="fas fa-clock me-1"></i>
                                    <text>Vence em @borrowing.DueDate.ToString("dd/MM/yyyy")</text>
                                }
                            </span>
                        </div>

                        <!-- Book Interactions -->
                        <div class="book-interactions">
                            <!-- Show ratings -->
                            <div class="book-rating-display mb-3">
                                <div class="d-flex justify-content-center gap-3">
                                    <span class="rating-display">
                                        <i class="fas fa-thumbs-up text-success"></i>
                                        <span id="likes-@borrowing.Book.BookId">@(borrowing.Book.BookReviews?.Count(r => r.IsLike) ?? 0)</span>
                                    </span>
                                    <span class="rating-display">
                                        <i class="fas fa-thumbs-down text-danger"></i>
                                        <span id="dislikes-@borrowing.Book.BookId">@(borrowing.Book.BookReviews?.Count(r => !r.IsLike) ?? 0)</span>
                                    </span>
                                </div>
                            </div>

                            <!-- Can evaluate borrowed books -->
                            <div class="can-evaluate">
                                <div class="text-center mb-2">
                                    <small class="text-success">
                                        <i class="fas fa-check-circle me-1"></i>
                                        Pode avaliar este livro
                                    </small>
                                </div>
                                <div class="d-flex justify-content-center gap-2 mb-3">
                                    <button class="btn btn-outline-success btn-sm" onclick="rateBook('@borrowing.Book.BookId', true)">
                                        <i class="fas fa-thumbs-up"></i> Gosto
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm" onclick="rateBook('@borrowing.Book.BookId', false)">
                                        <i class="fas fa-thumbs-down"></i> Não Gosto
                                    </button>
                                </div>

                                <div class="d-flex justify-content-center">
                                    <button class="btn btn-outline-secondary btn-sm"
                                            onclick="addComment('@borrowing.Book.BookId', '@borrowing.Book.Title')">
                                        <i class="fas fa-comment me-1"></i>Comentar
                                    </button>
                                </div>
                            </div>

                            <!-- Comments Section -->
                            @{
                                var comments = borrowing.Book.BookReviews?.Where(r => !string.IsNullOrEmpty(r.Comment)).ToList() ?? new List<BookReview>();
                            }
                            @if (comments.Any())
                            {
                                <div class="comments-section mt-3">
                                    <h6 class="mb-2">
                                        <i class="fas fa-comments me-1"></i>Comentários (@comments.Count())
                                    </h6>
                                    @foreach (var comment in comments.Take(2))
                                    {
                                        <div class="comment-item">
                                            <div class="comment-meta">
                                                @(comment.Member?.Name ?? "Utilizador") - @comment.ReviewDate.ToString("dd/MM/yyyy")
                                            </div>
                                            <div class="comment-text">@comment.Comment</div>
                                        </div>
                                    }
                                    @if (comments.Count() > 2)
                                    {
                                        <small class="text-muted">
                                            <i class="fas fa-plus me-1"></i>Mais @(comments.Count() - 2) comentários...
                                        </small>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="col-12">
            <div class="member-card text-center py-5">
                <i class="fas fa-book fa-4x text-muted mb-3"></i>
                <h5 class="text-muted">Nenhum livro emprestado</h5>
                <p class="text-muted">Não tem livros emprestados no momento.</p>
                <a href="@Url.Action("Catalog", "Books")" class="btn btn-primary">
                    <i class="fas fa-book-open me-2"></i>Explorar Catálogo
                </a>
            </div>
        </div>
    }
</div>
